From 6cdbf9fbdd79a07b24a82842fdd186272462f886 Mon Sep 17 00:00:00 2001
From: ZezhongWang <904192625@qq.com>
Date: Wed, 18 Jan 2023 17:45:28 +0200
Subject: [PATCH 1/2] changes from turbolink-libraries for grpc v1.41.0

---
 CMakeLists.txt                                | 16 ++++++++--
 cmake/install.cmake                           |  5 +++
 src/google/protobuf/compiler/importer.cc      |  4 ++-
 src/google/protobuf/descriptor.cc             |  3 +-
 .../protobuf/generated_message_tctable_impl.h |  3 --
 src/google/protobuf/inlined_string_field.h    |  2 +-
 src/google/protobuf/io/io_win32.cc            | 32 ++++++++++++++++++-
 src/google/protobuf/stubs/mutex.h             |  2 +-
 src/google/protobuf/stubs/platform_macros.h   |  2 +-
 src/google/protobuf/stubs/port.h              | 11 ++++++-
 10 files changed, 66 insertions(+), 14 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 04cb3303a..efcb4e0a9 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -33,7 +33,8 @@ if(protobuf_DEPRECATED_CMAKE_SUBDIRECTORY_USAGE)
 endif()
 
 # Add c++11 flags
-if (CYGWIN)
+if(__COMPILER_PS4 OR __COMPILER_PS5)
+elseif (CYGWIN)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")
 else()
   set(CMAKE_CXX_STANDARD 11)
@@ -160,7 +161,9 @@ else()
 endif()
 file(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/cmaketest.map)
 
-find_package(Threads REQUIRED)
+if(NOT (__COMPILER_PS4 OR __COMPILER_PS5))
+  find_package(Threads REQUIRED)
+endif()
 
 set(_protobuf_FIND_ZLIB)
 if (protobuf_WITH_ZLIB)
@@ -194,7 +197,9 @@ set(protobuf_LINK_LIBATOMIC false)
 if (NOT MSVC)
   include(CheckCXXSourceCompiles)
   set(OLD_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})
-  set(CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS} -std=c++11)
+  if(NOT (__COMPILER_PS4 OR __COMPILER_PS5))
+    set(CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS} -std=c++11)
+  endif()
   check_cxx_source_compiles("
     #include <atomic>
     int main() {
@@ -295,6 +300,11 @@ else (MSVC)
   set(LIB_PREFIX)
 endif (MSVC)
 
+if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
+  # Clang warning suppressions
+  add_definitions(-Wall -Werror -Wno-deprecated-register)
+endif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
+
 include_directories(
   ${ZLIB_INCLUDE_DIRECTORIES}
   ${protobuf_BINARY_DIR}
diff --git a/cmake/install.cmake b/cmake/install.cmake
index 825cb25fc..312db2c5e 100644
--- a/cmake/install.cmake
+++ b/cmake/install.cmake
@@ -26,6 +26,11 @@ foreach(_library ${_protobuf_libraries})
     RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT ${_library}
     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT ${_library}
     ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT ${_library})
+  if(WIN32)
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/${_library}.pdb
+       DESTINATION ${CMAKE_INSTALL_LIBDIR}
+       CONFIGURATIONS Debug)
+  endif()
 endforeach()
 
 if (protobuf_BUILD_PROTOC_BINARIES)
diff --git a/src/google/protobuf/compiler/importer.cc b/src/google/protobuf/compiler/importer.cc
index f1e26f8bd..c0e74e955 100644
--- a/src/google/protobuf/compiler/importer.cc
+++ b/src/google/protobuf/compiler/importer.cc
@@ -417,8 +417,10 @@ DiskSourceTree::DiskFileToVirtualFile(const std::string& disk_file,
   for (int i = 0; i < mapping_index; i++) {
     if (ApplyMapping(*virtual_file, mappings_[i].virtual_path,
                      mappings_[i].disk_path, shadowing_disk_file)) {
-      if (access(shadowing_disk_file->c_str(), F_OK) >= 0) {
+        FILE* fp = fopen(shadowing_disk_file->c_str(), "r");
+        if (fp != nullptr) {
         // File exists.
+        fclose(fp);
         return SHADOWED;
       }
     }
diff --git a/src/google/protobuf/descriptor.cc b/src/google/protobuf/descriptor.cc
index 5f3427dc7..ca86d7ad2 100644
--- a/src/google/protobuf/descriptor.cc
+++ b/src/google/protobuf/descriptor.cc
@@ -8212,8 +8212,7 @@ void FieldDescriptor::InternalTypeOnceInit() const {
       } else {
         name = lazy_default_value_enum_name;
       }
-      Symbol result = file()->pool()->CrossLinkOnDemandHelper(name, true);
-      default_value_enum_ = result.enum_value_descriptor();
+      default_value_enum_ = file()->pool()->CrossLinkOnDemandHelper(name, true).enum_value_descriptor();
     } else {
       default_value_enum_ = nullptr;
     }
diff --git a/src/google/protobuf/generated_message_tctable_impl.h b/src/google/protobuf/generated_message_tctable_impl.h
index 21fa5332d..f7a7773bc 100644
--- a/src/google/protobuf/generated_message_tctable_impl.h
+++ b/src/google/protobuf/generated_message_tctable_impl.h
@@ -248,9 +248,6 @@ enum FieldType : uint16_t {
 
 #ifndef NDEBUG
 template <size_t align>
-#ifndef _MSC_VER
-[[noreturn]]
-#endif
 void AlignFail(uintptr_t address) {
   GOOGLE_LOG(FATAL) << "Unaligned (" << align << ") access at " << address;
 }
diff --git a/src/google/protobuf/inlined_string_field.h b/src/google/protobuf/inlined_string_field.h
index 79e37d414..71bd6a7eb 100644
--- a/src/google/protobuf/inlined_string_field.h
+++ b/src/google/protobuf/inlined_string_field.h
@@ -427,7 +427,7 @@ inline PROTOBUF_NDEBUG_INLINE void InlinedStringField::InternalSwap(
     MessageLite* lhs_msg,  //
     InlinedStringField* rhs, Arena* rhs_arena, bool rhs_arena_dtor_registered,
     MessageLite* rhs_msg) {
-#if GOOGLE_PROTOBUF_INTERNAL_DONATE_STEAL_INLINE
+#ifdef GOOGLE_PROTOBUF_INTERNAL_DONATE_STEAL_INLINE
   lhs->get_mutable()->swap(*rhs->get_mutable());
   if (!lhs_arena_dtor_registered && rhs_arena_dtor_registered) {
     lhs_msg->OnDemandRegisterArenaDtor(lhs_arena);
diff --git a/src/google/protobuf/io/io_win32.cc b/src/google/protobuf/io/io_win32.cc
index 4e8190880..bbffe230f 100644
--- a/src/google/protobuf/io/io_win32.cc
+++ b/src/google/protobuf/io/io_win32.cc
@@ -42,8 +42,37 @@
 //
 // This file is only used on Windows, it's empty on other platforms.
 
-#if defined(_WIN32) && !defined(_XBOX_ONE)
+#if defined(_WIN32)
+#if defined(_XBOX_ONE)
+#include <io.h>
+
+namespace google {
+namespace protobuf {
+namespace io {
+namespace win32 {
+
+int open(const char* path, int flags, int mode) {
+	return ::_open(path, flags, mode);
+}
+
+int read(int fd, void* buffer, size_t size) {
+	return ::_read(fd, buffer, size);
+}
+
+int write(int fd, const void* buffer, size_t size) {
+	return ::_write(fd, buffer, size);
+}
+
+int close(int fd) {
+	return ::_close(fd);
+}
+
+}  // namespace win32
+}  // namespace io
+}  // namespace protobuf
+}  // namespace google
 
+#else // defined(_XBOX_ONE)
 // Comment this out to fall back to using the ANSI versions (open, mkdir, ...)
 // instead of the Unicode ones (_wopen, _wmkdir, ...). Doing so can be useful to
 // debug failing tests if that's caused by the long path support.
@@ -468,4 +497,5 @@ bool wcs_to_utf8(const wchar_t* input, string* out) {
 }  // namespace protobuf
 }  // namespace google
 
+#endif  // defined(_XBOX_ONE)
 #endif  // defined(_WIN32)
diff --git a/src/google/protobuf/stubs/mutex.h b/src/google/protobuf/stubs/mutex.h
index c4599913b..ba60d02e9 100644
--- a/src/google/protobuf/stubs/mutex.h
+++ b/src/google/protobuf/stubs/mutex.h
@@ -132,7 +132,7 @@ class GOOGLE_PROTOBUF_CAPABILITY("mutex") PROTOBUF_EXPORT WrappedMutex {
  private:
 #if defined(GOOGLE_PROTOBUF_SUPPORT_WINDOWS_XP)
   CallOnceInitializedMutex<CriticalSectionLock> mu_{};
-#elif defined(_WIN32)
+#elif defined(_WIN32) || defined(__ORBIS__) || defined(__PROSPERO__)
   CallOnceInitializedMutex<std::mutex> mu_{};
 #else
   std::mutex mu_{};
diff --git a/src/google/protobuf/stubs/platform_macros.h b/src/google/protobuf/stubs/platform_macros.h
index 24799600d..f4a6878d9 100644
--- a/src/google/protobuf/stubs/platform_macros.h
+++ b/src/google/protobuf/stubs/platform_macros.h
@@ -122,7 +122,7 @@ GOOGLE_PROTOBUF_PLATFORM_ERROR
 
 #undef GOOGLE_PROTOBUF_PLATFORM_ERROR
 
-#if defined(GOOGLE_PROTOBUF_OS_ANDROID) || defined(GOOGLE_PROTOBUF_OS_IPHONE) || defined(__OpenBSD__)
+#if defined(GOOGLE_PROTOBUF_OS_ANDROID) || defined(GOOGLE_PROTOBUF_OS_IPHONE) || defined(__OpenBSD__) || defined(__ORBIS__) || defined(__PROSPERO__)
 // Android ndk does not support the __thread keyword very well yet. Here
 // we use pthread_key_create()/pthread_getspecific()/... methods for
 // TLS support on android.
diff --git a/src/google/protobuf/stubs/port.h b/src/google/protobuf/stubs/port.h
index b074cb163..0538e9176 100644
--- a/src/google/protobuf/stubs/port.h
+++ b/src/google/protobuf/stubs/port.h
@@ -60,7 +60,11 @@
 #ifdef __APPLE__
 #include <machine/endian.h>  // __BYTE_ORDER
 #elif defined(__FreeBSD__)
+#if defined(__ORBIS__) || defined(__PROSPERO__)
+#include <machine/endian.h>  // __BYTE_ORDER
+#else
 #include <sys/endian.h>  // __BYTE_ORDER
+#endif
 #elif (defined(sun) || defined(__sun)) && (defined(__SVR4) || defined(__svr4__))
 #include <sys/isa_defs.h>  // __BYTE_ORDER
 #elif defined(_AIX) || defined(__TOS_AIX__)
@@ -84,8 +88,13 @@
 #include <intrin.h>
 #elif defined(__APPLE__)
 #include <libkern/OSByteOrder.h>
-#elif defined(__linux__) || defined(__ANDROID__) || defined(__CYGWIN__)
+#elif defined(__ANDROID__)
 #include <byteswap.h>  // IWYU pragma: export
+#elif defined(__linux__) || defined(__CYGWIN__)
+#include <bits/byteswap.h>
+#define bswap_16(x) __bswap_16 (x)
+#define bswap_32(x) __bswap_32 (x)
+#define bswap_64(x) __bswap_64 (x)
 #endif
 
 // Legacy: some users reference these (internal-only) macros even though we
-- 
2.39.0.windows.1

