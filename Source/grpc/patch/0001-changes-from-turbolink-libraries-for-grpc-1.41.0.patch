From da16db309e2544ae473a019a9ddf570281ae5e4b Mon Sep 17 00:00:00 2001
From: ZezhongWang <904192625@qq.com>
Date: Wed, 18 Jan 2023 18:39:02 +0200
Subject: [PATCH] changes from turbolink libraries for grpc 1.41.0

---
 CMakeLists.txt                                | 45 +++++++---
 include/grpc/event_engine/port.h              |  4 +-
 include/grpc/impl/codegen/port_platform.h     | 25 +++++-
 src/core/lib/gpr/cpu_posix.cc                 |  4 +
 src/core/lib/gpr/log_posix.cc                 |  4 +
 src/core/lib/gpr/tmpfile.h                    |  2 +
 src/core/lib/gpr/tmpfile_posix.cc             |  3 +-
 src/core/lib/gprpp/env_posix.cc               | 12 +++
 src/core/lib/gprpp/thd_posix.cc               |  8 ++
 src/core/lib/iomgr/endpoint_pair_posix.cc     |  7 +-
 src/core/lib/iomgr/ev_epoll1_linux.cc         | 24 ++++++
 src/core/lib/iomgr/ev_posix.cc                |  2 +
 src/core/lib/iomgr/ev_posix.h                 |  4 +
 src/core/lib/iomgr/internal_errqueue.cc       |  2 +
 src/core/lib/iomgr/port.h                     | 14 ++++
 src/core/lib/iomgr/sockaddr_posix.h           |  2 +
 .../lib/iomgr/socket_utils_common_posix.cc    |  8 +-
 src/core/lib/iomgr/tcp_client_posix.cc        |  2 +
 .../iomgr/tcp_server_utils_posix_common.cc    |  5 ++
 src/core/lib/iomgr/wakeup_fd_pipe.cc          | 82 +++++++++++++++++++
 .../address_sorting_internal.h                |  3 +
 21 files changed, 240 insertions(+), 22 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7052846e66..49a779fec1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -49,6 +49,7 @@ option(gRPC_BUILD_TESTS "Build tests" OFF)
 option(gRPC_BUILD_CODEGEN "Build codegen" ON)
 option(gRPC_BUILD_CSHARP_EXT "Build C# extensions" ON)
 option(gRPC_BACKWARDS_COMPATIBILITY_MODE "Build libraries that are binary compatible across a larger number of OS and libc versions" OFF)
+option(gRPC_USE_CARES "Use c-ares as DNS requests library" ON)
 
 set(gRPC_INSTALL_default ON)
 if(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
@@ -302,6 +303,13 @@ if (gRPC_XDS_USER_AGENT_IS_CSHARP)
   add_definitions("-DGRPC_XDS_USER_AGENT_NAME_SUFFIX=\"csharp\"" "-DGRPC_XDS_USER_AGENT_VERSION_SUFFIX=\"2.50.0\"")
 endif()
 
+if (gRPC_USE_CARES)
+ add_definitions("-DGRPC_ARES=1")
+ include(cmake/cares.cmake)
+else()
+ add_definitions("-DGRPC_ARES=0")
+endif()
+
 if(UNIX AND NOT HAIKU)
   # -pthread does more than -lpthread
   set(THREADS_PREFER_PTHREAD_FLAG ON)
@@ -318,7 +326,6 @@ include(cmake/ccache.cmake)
 include(cmake/abseil-cpp.cmake)
 include(cmake/address_sorting.cmake)
 include(cmake/benchmark.cmake)
-include(cmake/cares.cmake)
 include(cmake/protobuf.cmake)
 include(cmake/re2.cmake)
 include(cmake/ssl.cmake)
@@ -1309,8 +1316,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/address_sorting.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/address_sorting.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug 
     )
   endif()
 endif()
@@ -1581,8 +1589,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/gpr.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/gpr.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -2377,8 +2386,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -2922,8 +2932,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc_unsecure.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc_unsecure.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -3182,8 +3193,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc++.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -3438,8 +3450,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++_alts.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc++_alts.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -3501,8 +3514,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++_error_details.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc++_error_details.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -3569,8 +3583,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++_reflection.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc++_reflection.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -3856,8 +3871,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc++_unsecure.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc++_unsecure.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -4112,8 +4128,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpc_plugin_support.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpc_plugin_support.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -4182,8 +4199,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/grpcpp_channelz.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/grpcpp_channelz.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
@@ -4269,8 +4287,9 @@ if(WIN32 AND MSVC)
     COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
   )
   if(gRPC_INSTALL)
-    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/upb.pdb
+    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Debug/upb.pdb
       DESTINATION ${gRPC_INSTALL_LIBDIR} OPTIONAL
+      CONFIGURATIONS Debug
     )
   endif()
 endif()
diff --git a/include/grpc/event_engine/port.h b/include/grpc/event_engine/port.h
index 3055a667e0..613f8920c5 100644
--- a/include/grpc/event_engine/port.h
+++ b/include/grpc/event_engine/port.h
@@ -20,10 +20,12 @@
 #if defined(GPR_ANDROID) || defined(GPR_LINUX) || defined(GPR_APPLE) ||     \
     defined(GPR_FREEBSD) || defined(GPR_OPENBSD) || defined(GPR_SOLARIS) || \
     defined(GPR_AIX) || defined(GPR_NACL) || defined(GPR_FUCHSIA) ||        \
-    defined(GRPC_POSIX_SOCKET) || defined(GPR_NETBSD)
+    defined(GRPC_POSIX_SOCKET) || defined(GPR_NETBSD) || defined(GPR_PLAYSTATION)
 #define GRPC_EVENT_ENGINE_POSIX
 #include <arpa/inet.h>
+#if !defined(GPR_PLAYSTATION)
 #include <netdb.h>
+#endif
 #include <netinet/in.h>
 #include <sys/socket.h>
 #include <unistd.h>
diff --git a/include/grpc/impl/codegen/port_platform.h b/include/grpc/impl/codegen/port_platform.h
index ec8217a345..8139e9fc88 100644
--- a/include/grpc/impl/codegen/port_platform.h
+++ b/include/grpc/impl/codegen/port_platform.h
@@ -257,6 +257,29 @@
 #else /* _LP64 */
 #define GPR_ARCH_32 1
 #endif /* _LP64 */
+#elif defined(__ORBIS__) || defined(__PROSPERO__)
+#define GPR_PLATFORM_STRING "playstation"
+#ifndef _BSD_SOURCE
+#define _BSD_SOURCE
+#endif
+#define GPR_PLAYSTATION 1
+#define GPR_CPU_POSIX 1
+#define GPR_GCC_ATOMIC 1
+#define GPR_POSIX_LOG 1
+#define GPR_POSIX_ENV 1
+#define GPR_POSIX_TMPFILE 1
+#define GPR_POSIX_STAT 1
+#define GPR_POSIX_STRING 1
+#define GPR_POSIX_SUBPROCESS 1
+#define GPR_POSIX_SYNC 1
+#define GPR_POSIX_TIME 1
+#define GPR_HAS_PTHREAD_H 1
+#define GPR_GETPID_IN_UNISTD_H 1
+//#define GPR_SUPPORT_CHANNELS_FROM_FD 1
+#define GPR_ARCH_64 1
+#include <net.h>
+#include <netinet/in.h>
+#include <netinet6/in6.h>
 #elif defined(__FreeBSD__)
 #define GPR_PLATFORM_STRING "freebsd"
 #ifndef _BSD_SOURCE
@@ -630,7 +653,7 @@ typedef unsigned __int64 uint64_t;
 #define GPR_ATTRIBUTE_NORETURN
 #endif
 
-#if GPR_FORBID_UNREACHABLE_CODE
+#ifdef GPR_FORBID_UNREACHABLE_CODE
 #define GPR_UNREACHABLE_CODE(STATEMENT)
 #else
 #ifdef __cplusplus
diff --git a/src/core/lib/gpr/cpu_posix.cc b/src/core/lib/gpr/cpu_posix.cc
index 7a1d546059..53d703c748 100644
--- a/src/core/lib/gpr/cpu_posix.cc
+++ b/src/core/lib/gpr/cpu_posix.cc
@@ -36,11 +36,15 @@ static long ncpus = 0;
 static pthread_key_t thread_id_key;
 
 static void init_ncpus() {
+#if defined(GPR_PLAYSTATION)
+  ncpus = 16;
+#else
   ncpus = sysconf(_SC_NPROCESSORS_CONF);
   if (ncpus < 1 || ncpus > INT32_MAX) {
     gpr_log(GPR_ERROR, "Cannot determine number of CPUs: assuming 1");
     ncpus = 1;
   }
+#endif
 }
 
 unsigned gpr_cpu_num_cores(void) {
diff --git a/src/core/lib/gpr/log_posix.cc b/src/core/lib/gpr/log_posix.cc
index 2c28bddd75..3648ff8eef 100644
--- a/src/core/lib/gpr/log_posix.cc
+++ b/src/core/lib/gpr/log_posix.cc
@@ -84,7 +84,11 @@ void gpr_default_log(gpr_log_func_args* args) {
   else
     display_file = final_slash + 1;
 
+#if defined(GPR_PLAYSTATION)
+  if (!localtime_s(&timer, &tm)) {
+#else
   if (!localtime_r(&timer, &tm)) {
+#endif
     strcpy(time_buffer, "error:localtime");
   } else if (0 ==
              strftime(time_buffer, sizeof(time_buffer), "%m%d %H:%M:%S", &tm)) {
diff --git a/src/core/lib/gpr/tmpfile.h b/src/core/lib/gpr/tmpfile.h
index 3ce3ff5e5d..bbef708982 100644
--- a/src/core/lib/gpr/tmpfile.h
+++ b/src/core/lib/gpr/tmpfile.h
@@ -23,10 +23,12 @@
 
 #include <stdio.h>
 
+#if !defined(GPR_PLAYSTATION)
 /* Creates a temporary file from a prefix.
    If tmp_filename is not NULL, *tmp_filename is assigned the name of the
    created file and it is the responsibility of the caller to gpr_free it
    unless an error occurs in which case it will be set to NULL. */
 FILE* gpr_tmpfile(const char* prefix, char** tmp_filename);
+#endif
 
 #endif /* GRPC_CORE_LIB_GPR_TMPFILE_H */
diff --git a/src/core/lib/gpr/tmpfile_posix.cc b/src/core/lib/gpr/tmpfile_posix.cc
index 166cdf68f2..90d82d6211 100644
--- a/src/core/lib/gpr/tmpfile_posix.cc
+++ b/src/core/lib/gpr/tmpfile_posix.cc
@@ -32,6 +32,7 @@
 #include "src/core/lib/gpr/string.h"
 #include "src/core/lib/gpr/tmpfile.h"
 
+#if !defined(GPR_PLAYSTATION)
 FILE* gpr_tmpfile(const char* prefix, char** tmp_filename) {
   FILE* result = nullptr;
   char* filename_template;
@@ -65,5 +66,5 @@ end:
   }
   return result;
 }
-
+#endif
 #endif /* GPR_POSIX_TMPFILE */
diff --git a/src/core/lib/gprpp/env_posix.cc b/src/core/lib/gprpp/env_posix.cc
index fc85a77800..d507c0ba3b 100644
--- a/src/core/lib/gprpp/env_posix.cc
+++ b/src/core/lib/gprpp/env_posix.cc
@@ -27,19 +27,31 @@
 namespace grpc_core {
 
 absl::optional<std::string> GetEnv(const char* name) {
+#if defined(GPR_PLAYSTATION)
+  return nullptr;
+#else
   char* result = getenv(name);
   if (result == nullptr) return absl::nullopt;
   return result;
+#endif
 }
 
 void SetEnv(const char* name, const char* value) {
+#if defined(GPR_PLAYSTATION)
+  (void)0;
+#else
   int res = setenv(name, value, 1);
   if (res != 0) abort();
+#endif
 }
 
 void UnsetEnv(const char* name) {
+#if defined(GPR_PLAYSTATION)
+  (void)0;
+#else
   int res = unsetenv(name);
   if (res != 0) abort();
+#endif
 }
 
 }  // namespace grpc_core
diff --git a/src/core/lib/gprpp/thd_posix.cc b/src/core/lib/gprpp/thd_posix.cc
index e8963a1d34..eed00935f5 100644
--- a/src/core/lib/gprpp/thd_posix.cc
+++ b/src/core/lib/gprpp/thd_posix.cc
@@ -54,14 +54,22 @@ struct thd_arg {
 size_t RoundUpToPageSize(size_t size) {
   // TODO(yunjiaw): Change this variable (page_size) to a function-level static
   // when possible
+#if defined(GPR_PLAYSTATION)
+  size_t page_size = static_cast<size_t>(SCE_KERNEL_PAGE_SIZE);
+#else
   size_t page_size = static_cast<size_t>(sysconf(_SC_PAGESIZE));
+#endif
   return (size + page_size - 1) & ~(page_size - 1);
 }
 
 // Returns the minimum valid stack size that can be passed to
 // pthread_attr_setstacksize.
 size_t MinValidStackSize(size_t request_size) {
+#if defined(GPR_PLAYSTATION)
+  size_t min_stacksize = SCE_PTHREAD_STACK_MIN;
+#else
   size_t min_stacksize = sysconf(_SC_THREAD_STACK_MIN);
+#endif
   if (request_size < min_stacksize) {
     request_size = min_stacksize;
   }
diff --git a/src/core/lib/iomgr/endpoint_pair_posix.cc b/src/core/lib/iomgr/endpoint_pair_posix.cc
index cc721015fd..c402e7f616 100644
--- a/src/core/lib/iomgr/endpoint_pair_posix.cc
+++ b/src/core/lib/iomgr/endpoint_pair_posix.cc
@@ -44,12 +44,9 @@
 #include "src/core/lib/resource_quota/api.h"
 
 static void create_sockets(int sv[2]) {
-  int flags;
   grpc_create_socketpair_if_unix(sv);
-  flags = fcntl(sv[0], F_GETFL, 0);
-  GPR_ASSERT(fcntl(sv[0], F_SETFL, flags | O_NONBLOCK) == 0);
-  flags = fcntl(sv[1], F_GETFL, 0);
-  GPR_ASSERT(fcntl(sv[1], F_SETFL, flags | O_NONBLOCK) == 0);
+  GPR_ASSERT(grpc_set_socket_nonblocking(sv[0], 1) == GRPC_ERROR_NONE);
+  GPR_ASSERT(grpc_set_socket_nonblocking(sv[1], 1) == GRPC_ERROR_NONE);
   GPR_ASSERT(grpc_set_socket_no_sigpipe_if_possible(sv[0]) == GRPC_ERROR_NONE);
   GPR_ASSERT(grpc_set_socket_no_sigpipe_if_possible(sv[1]) == GRPC_ERROR_NONE);
 }
diff --git a/src/core/lib/iomgr/ev_epoll1_linux.cc b/src/core/lib/iomgr/ev_epoll1_linux.cc
index 2bb095a416..0bd0a415d8 100644
--- a/src/core/lib/iomgr/ev_epoll1_linux.cc
+++ b/src/core/lib/iomgr/ev_epoll1_linux.cc
@@ -29,10 +29,28 @@
 #include <errno.h>
 #include <fcntl.h>
 #include <limits.h>
+#if !defined(GPR_PLAYSTATION)
 #include <poll.h>
+#endif
 #include <pthread.h>
 #include <string.h>
+#if defined(GPR_PLAYSTATION)
+#include <net.h>
+#define EPOLLIN       SCE_NET_EPOLLIN
+#define EPOLLOUT      SCE_NET_EPOLLOUT
+#define EPOLLERR      SCE_NET_EPOLLERR
+#define EPOLLHUP      SCE_NET_EPOLLHUP
+#define EPOLLET       0
+#define EPOLLPRI      0
+#define EPOLL_CTL_ADD SCE_NET_EPOLL_CTL_ADD
+#define EPOLL_CTL_DEL SCE_NET_EPOLL_CTL_DEL
+#define EPOLLDESCID   SCE_NET_EPOLLDESCID
+#define epoll_event   SceNetEpollEvent
+#define epoll_ctl     sceNetEpollControl
+#define epoll_wait    sceNetEpollWait
+#else
 #include <sys/epoll.h>
+#endif
 #include <sys/socket.h>
 #include <unistd.h>
 
@@ -99,12 +117,18 @@ static int epoll_create_and_cloexec() {
     gpr_log(GPR_ERROR, "epoll_create1 unavailable");
   }
 #else
+  #if defined(GPR_PLAYSTATION)
+  SceNetId fd = sceNetEpollCreate("turbolink", 0);
+  #else
   int fd = epoll_create(MAX_EPOLL_EVENTS);
+  #endif
   if (fd < 0) {
     gpr_log(GPR_ERROR, "epoll_create unavailable");
+  #if !defined(GPR_PLAYSTATION)
   } else if (fcntl(fd, F_SETFD, FD_CLOEXEC) != 0) {
     gpr_log(GPR_ERROR, "fcntl following epoll_create failed");
     return -1;
+  #endif
   }
 #endif
   return fd;
diff --git a/src/core/lib/iomgr/ev_posix.cc b/src/core/lib/iomgr/ev_posix.cc
index da3e0db365..b2cf725923 100644
--- a/src/core/lib/iomgr/ev_posix.cc
+++ b/src/core/lib/iomgr/ev_posix.cc
@@ -62,6 +62,7 @@ grpc_core::DebugOnlyTraceFlag grpc_polling_api_trace(false, "polling_api");
 #define GRPC_POLLING_API_TRACE(...)
 #endif  // NDEBUG
 
+#if !defined(GPR_PLAYSTATION)
 /** Default poll() function - a pointer so that it can be overridden by some
  *  tests */
 #ifndef GPR_AIX
@@ -72,6 +73,7 @@ int aix_poll(struct pollfd fds[], nfds_t nfds, int timeout) {
 }
 grpc_poll_function_type grpc_poll_function = aix_poll;
 #endif  // GPR_AIX
+#endif
 
 grpc_wakeup_fd grpc_global_wakeup_fd;
 
diff --git a/src/core/lib/iomgr/ev_posix.h b/src/core/lib/iomgr/ev_posix.h
index b12942dd2c..5e63c098da 100644
--- a/src/core/lib/iomgr/ev_posix.h
+++ b/src/core/lib/iomgr/ev_posix.h
@@ -21,7 +21,9 @@
 
 #include <grpc/support/port_platform.h>
 
+#if !defined(GPR_PLAYSTATION)
 #include <poll.h>
+#endif
 
 #include "src/core/lib/debug/trace.h"
 #include "src/core/lib/gprpp/global_config.h"
@@ -202,8 +204,10 @@ bool grpc_add_closure_to_background_poller(grpc_closure* closure,
 /* Shut down all the closures registered in the background poller. */
 void grpc_shutdown_background_closure();
 
+#if !defined(GPR_PLAYSTATION)
 /* override to allow tests to hook poll() usage */
 typedef int (*grpc_poll_function_type)(struct pollfd*, nfds_t, int);
 extern grpc_poll_function_type grpc_poll_function;
+#endif
 
 #endif /* GRPC_CORE_LIB_IOMGR_EV_POSIX_H */
diff --git a/src/core/lib/iomgr/internal_errqueue.cc b/src/core/lib/iomgr/internal_errqueue.cc
index 5dcff1a0fd..60f1dc032a 100644
--- a/src/core/lib/iomgr/internal_errqueue.cc
+++ b/src/core/lib/iomgr/internal_errqueue.cc
@@ -25,7 +25,9 @@
 #include <errno.h>
 #include <stdlib.h>
 #include <string.h>
+#if !defined(GPR_PLAYSTATION)
 #include <sys/utsname.h>
+#endif
 
 namespace grpc_core {
 
diff --git a/src/core/lib/iomgr/port.h b/src/core/lib/iomgr/port.h
index 65015b6ba5..a07bb17627 100644
--- a/src/core/lib/iomgr/port.h
+++ b/src/core/lib/iomgr/port.h
@@ -125,6 +125,13 @@
 #define GRPC_POSIX_SOCKETUTILS 1
 #define GRPC_POSIX_SYSCONF 1
 #define GRPC_POSIX_WAKEUP_FD 1
+#elif defined(GPR_PLAYSTATION)
+#define GRPC_HAVE_ARPA_NAMESER 1
+#define GRPC_POSIX_NO_SPECIAL_WAKEUP_FD 1
+#define GRPC_POSIX_SOCKET 1
+#define GRPC_POSIX_SOCKETUTILS 1
+#define GRPC_POSIX_WAKEUP_FD 1 
+#define GRPC_LINUX_EPOLL 1
 #elif defined(GPR_FREEBSD)
 #define GRPC_HAVE_ARPA_NAMESER 1
 #define GRPC_HAVE_IFADDRS 1
@@ -228,6 +235,13 @@
 #define GRPC_POSIX_SOCKET_UTILS_COMMON 1
 #endif
 
+#ifdef GPR_PLAYSTATION
+#undef GRPC_POSIX_SOCKET_EV_EPOLLEX
+#undef GRPC_POSIX_SOCKET_EV_POLL
+#undef GRPC_POSIX_SOCKET_EV_EPOLL1
+#undef GRPC_POSIX_SOCKET_IF_NAMETOINDEX
+#endif
+
 #if defined(GRPC_POSIX_HOST_NAME_MAX) && defined(GRPC_POSIX_SYSCONF)
 #error "Cannot define both GRPC_POSIX_HOST_NAME_MAX and GRPC_POSIX_SYSCONF"
 #endif
diff --git a/src/core/lib/iomgr/sockaddr_posix.h b/src/core/lib/iomgr/sockaddr_posix.h
index 4909806aae..28845f7c9e 100644
--- a/src/core/lib/iomgr/sockaddr_posix.h
+++ b/src/core/lib/iomgr/sockaddr_posix.h
@@ -27,7 +27,9 @@
 
 #ifdef GRPC_POSIX_SOCKET_SOCKADDR
 #include <arpa/inet.h>
+#if !defined(GPR_PLAYSTATION)
 #include <netdb.h>
+#endif
 #include <netinet/in.h>
 #include <sys/socket.h>
 #include <sys/types.h>
diff --git a/src/core/lib/iomgr/socket_utils_common_posix.cc b/src/core/lib/iomgr/socket_utils_common_posix.cc
index f32dc0fd50..acbef4d04c 100644
--- a/src/core/lib/iomgr/socket_utils_common_posix.cc
+++ b/src/core/lib/iomgr/socket_utils_common_posix.cc
@@ -69,6 +69,12 @@ grpc_error_handle grpc_set_socket_zerocopy(int fd) {
 
 /* set a socket to non blocking mode */
 grpc_error_handle grpc_set_socket_nonblocking(int fd, int non_blocking) {
+#if defined(GPR_PLAYSTATION)
+  int ret = sceNetSetsockopt(fd, SCE_NET_SOL_SOCKET, SCE_NET_SO_NBIO, &non_blocking, sizeof(non_blocking));
+  if (ret < 0) {
+    return GRPC_OS_ERROR(sce_net_errno, "sceNetSetsockopt(SO_NBIO) failed");
+  }
+#else
   int oldflags = fcntl(fd, F_GETFL, 0);
   if (oldflags < 0) {
     return GRPC_OS_ERROR(errno, "fcntl");
@@ -83,7 +89,7 @@ grpc_error_handle grpc_set_socket_nonblocking(int fd, int non_blocking) {
   if (fcntl(fd, F_SETFL, oldflags) != 0) {
     return GRPC_OS_ERROR(errno, "fcntl");
   }
-
+#endif
   return GRPC_ERROR_NONE;
 }
 
diff --git a/src/core/lib/iomgr/tcp_client_posix.cc b/src/core/lib/iomgr/tcp_client_posix.cc
index e11e779033..c615fb5209 100644
--- a/src/core/lib/iomgr/tcp_client_posix.cc
+++ b/src/core/lib/iomgr/tcp_client_posix.cc
@@ -100,8 +100,10 @@ static grpc_error_handle prepare_socket(
 
   err = grpc_set_socket_nonblocking(fd, 1);
   if (!GRPC_ERROR_IS_NONE(err)) goto error;
+#if !defined(GPR_PLAYSTATION)
   err = grpc_set_socket_cloexec(fd, 1);
   if (!GRPC_ERROR_IS_NONE(err)) goto error;
+#endif
   if (!grpc_is_unix_socket(addr)) {
     err = grpc_set_socket_low_latency(fd, 1);
     if (!GRPC_ERROR_IS_NONE(err)) goto error;
diff --git a/src/core/lib/iomgr/tcp_server_utils_posix_common.cc b/src/core/lib/iomgr/tcp_server_utils_posix_common.cc
index 73a6b943ec..d7f01c1e71 100644
--- a/src/core/lib/iomgr/tcp_server_utils_posix_common.cc
+++ b/src/core/lib/iomgr/tcp_server_utils_posix_common.cc
@@ -49,6 +49,9 @@ static int s_max_accept_queue_size;
 
 /* get max listen queue size on linux */
 static void init_max_accept_queue_size(void) {
+#if defined(GPR_PLAYSTATION)
+  s_max_accept_queue_size = 16;
+#else
   int n = SOMAXCONN;
   char buf[64];
   FILE* fp = fopen("/proc/sys/net/core/somaxconn", "r");
@@ -171,8 +174,10 @@ grpc_error_handle grpc_tcp_server_prepare_socket(
 #endif
   err = grpc_set_socket_nonblocking(fd, 1);
   if (!GRPC_ERROR_IS_NONE(err)) goto error;
+#if !defined(GPR_PLAYSTATION)
   err = grpc_set_socket_cloexec(fd, 1);
   if (!GRPC_ERROR_IS_NONE(err)) goto error;
+#endif
   if (!grpc_is_unix_socket(addr)) {
     err = grpc_set_socket_low_latency(fd, 1);
     if (!GRPC_ERROR_IS_NONE(err)) goto error;
diff --git a/src/core/lib/iomgr/wakeup_fd_pipe.cc b/src/core/lib/iomgr/wakeup_fd_pipe.cc
index 50cd594b92..32797722a6 100644
--- a/src/core/lib/iomgr/wakeup_fd_pipe.cc
+++ b/src/core/lib/iomgr/wakeup_fd_pipe.cc
@@ -26,19 +26,83 @@
 #include <string.h>
 #include <unistd.h>
 
+#if defined(GPR_PLAYSTATION)
+#include <kernel.h>
+#endif
+
 #include <grpc/support/log.h>
 
 #include "src/core/lib/iomgr/socket_utils_posix.h"
 #include "src/core/lib/iomgr/wakeup_fd_pipe.h"
 #include "src/core/lib/iomgr/wakeup_fd_posix.h"
 
+#if defined(GPR_PLAYSTATION)
+int playstation_create_pipe(int pipefd[2]) {
+  //
+  // https://trac.transmissionbt.com/browser/trunk/libtransmission/trevent.c
+  //
+  pipefd[0] = pipefd[1] = -1;
+
+  SceNetId s = sceNetSocket("pipe", AF_INET, SOCK_STREAM, IPPROTO_TCP);
+  if (s < 0) {
+    return sce_net_errno;
+  }
+
+  SceNetSockaddrIn serv_addr;
+  memset(&serv_addr, 0, sizeof(serv_addr));
+  serv_addr.sin_len = sizeof(serv_addr);
+  serv_addr.sin_family = SCE_NET_AF_INET;
+  serv_addr.sin_port = sceNetHtons(0);
+  serv_addr.sin_addr.s_addr = sceNetHtonl(INADDR_LOOPBACK);
+
+  for (;;) {
+    if (0 != sceNetBind(s, (SceNetSockaddr*)&serv_addr, sizeof(serv_addr))) break;
+    if (0 != sceNetListen(s, 8)) break;
+
+    SceNetSocklen_t server_addr_len = sizeof(serv_addr); 
+    if (0 != sceNetGetsockname(s, (SceNetSockaddr*)&serv_addr, &server_addr_len)) break;
+
+    pipefd[1] = sceNetSocket("pipe_1", AF_INET, SOCK_STREAM, IPPROTO_TCP);
+    if (pipefd[1] < 0) break;
+
+    //if (GRPC_ERROR_NONE != grpc_set_socket_nonblocking(pipefd[1], 1)) break;
+
+    if(0 != sceNetConnect(pipefd[1], (SceNetSockaddr*)&serv_addr, sizeof(serv_addr))) break;
+
+    SceNetSockaddrIn sin_accept;
+    SceNetSocklen_t sin_len = sizeof(sin_accept);
+    pipefd[0] = sceNetAccept(s, (SceNetSockaddr*)&sin_accept, &sin_len);
+    if (pipefd[0] < 0) break;
+
+    //if (GRPC_ERROR_NONE != grpc_set_socket_nonblocking(pipefd[0], 1)) break;
+
+    sceNetSocketClose(s);
+    return 0;
+  }
+  int error_code = sce_net_errno;
+  // error case
+  if (pipefd[0] != -1) sceNetSocketClose(pipefd[0]);
+  if (pipefd[1] != -1) sceNetSocketClose(pipefd[1]);
+  sceNetSocketClose(s);
+  pipefd[0] = pipefd[1] = -1;
+  return error_code;
+}
+#endif
 static grpc_error_handle pipe_init(grpc_wakeup_fd* fd_info) {
   int pipefd[2];
+#if defined(GPR_PLAYSTATION)
+  int r = playstation_create_pipe(pipefd);
+  if (0 != r) {
+    gpr_log(GPR_ERROR, "pipe creation failed (%d)", r);
+    return GRPC_OS_ERROR(r, "pipe");
+  }
+#else
   int r = pipe(pipefd);
   if (0 != r) {
     gpr_log(GPR_ERROR, "pipe creation failed (%d): %s", errno, strerror(errno));
     return GRPC_OS_ERROR(errno, "pipe");
   }
+#endif
   grpc_error_handle err;
   err = grpc_set_socket_nonblocking(pipefd[0], 1);
   if (!GRPC_ERROR_IS_NONE(err)) return err;
@@ -54,10 +118,18 @@ static grpc_error_handle pipe_consume(grpc_wakeup_fd* fd_info) {
   ssize_t r;
 
   for (;;) {
+#if defined(GPR_PLAYSTATION)
+    r = sceNetRecv(fd_info->read_fd, buf, sizeof(buf), SCE_NET_MSG_DONTWAIT);
+#else
     r = read(fd_info->read_fd, buf, sizeof(buf));
+#endif
     if (r > 0) continue;
     if (r == 0) return GRPC_ERROR_NONE;
+#if defined(GPR_PLAYSTATION)
+    switch (sce_net_errno) {
+#else
     switch (errno) {
+#endif
       case EAGAIN:
         return GRPC_ERROR_NONE;
       case EINTR:
@@ -70,14 +142,24 @@ static grpc_error_handle pipe_consume(grpc_wakeup_fd* fd_info) {
 
 static grpc_error_handle pipe_wakeup(grpc_wakeup_fd* fd_info) {
   char c = 0;
+#if defined(GPR_PLAYSTATION)
+  while (sceNetSend(fd_info->write_fd, &c, 1, SCE_NET_MSG_DONTWAIT) != 1 &&
+         sce_net_errno == EINTR) {
+#else
   while (write(fd_info->write_fd, &c, 1) != 1 && errno == EINTR) {
+#endif
   }
   return GRPC_ERROR_NONE;
 }
 
 static void pipe_destroy(grpc_wakeup_fd* fd_info) {
+#if defined(GPR_PLAYSTATION)
+  if (fd_info->read_fd != 0) sceNetSocketClose(fd_info->read_fd);
+  if (fd_info->write_fd != 0) sceNetSocketClose(fd_info->write_fd);
+#else
   if (fd_info->read_fd != 0) close(fd_info->read_fd);
   if (fd_info->write_fd != 0) close(fd_info->write_fd);
+#endif
 }
 
 static int pipe_check_availability(void) {
diff --git a/third_party/address_sorting/address_sorting_internal.h b/third_party/address_sorting/address_sorting_internal.h
index be59d44fee..662354a122 100644
--- a/third_party/address_sorting/address_sorting_internal.h
+++ b/third_party/address_sorting/address_sorting_internal.h
@@ -56,6 +56,9 @@
 #endif
 #include <arpa/inet.h>
 #include <netinet/in.h>
+#if defined(__ORBIS__) || defined(__PROSPERO__)
+#include <netinet6/in6.h>
+#endif
 #include <sys/socket.h>
 #define ADDRESS_SORTING_POSIX 1
 #endif
-- 
2.39.0.windows.1

